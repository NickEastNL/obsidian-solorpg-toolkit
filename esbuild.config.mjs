import esbuild from 'esbuild';
import { sassPlugin } from 'esbuild-sass-plugin';
import builtins from 'builtin-modules';

const isProd = process.env.BUILD === 'production';

console.log(process.env.BUILD);

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const jsContext = await esbuild.context({
	banner: {
		js: banner,
	},
	plugins: [],
	entryPoints: ['./src/main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins,
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	sourcemap: isProd ? false : 'inline',
	minify: isProd ? true : false,
	treeShaking: true,
	outfile: 'main.js',
});

const cssContext = await esbuild.context({
	entryPoints: ['./src/styles/main.scss'],
	outfile: 'styles.css',
	plugins: [sassPlugin()],
	bundle: true,
	allowOverwrite: true,
	minify: false,
	sourcemap: isProd ? false : 'inline',
});

if (isProd) {
	await jsContext.rebuild();
	await cssContext.rebuild();
	process.exit(0);
} else {
	await Promise.all([jsContext.watch(), cssContext.watch()]);
}
